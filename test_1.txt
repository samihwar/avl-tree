/* Utilities */


/* Tests */

/* (when you're ready, remove the comments and test your code) */


typedef enum {FAILED,PASSED} TestResult;

void avl_test();
int avl_test_recurse( AVLNodePtr tnode, TestResult * res );
void insert_delete_search_test();
void rank_reversed_test();
void last_missing_test();
void howmany_test();

/*void mytest();

void mytest()
{
    AVLNodePtr tree=NULL , node=NULL;
    int i,j;
    tree=avl_insert(tree,1);
    tree=avl_insert(tree,3);
    tree=avl_insert(tree,2);
    printf("\n\n%d\n\n",tree->key);
    /*printf("\n\n%d\n\n",tree->child[0]->key);
    printf("\n\n%d\n\n",tree->child[0]->child[1]->key);
}*/

void avl_test(){
    int i=1;
    TestResult res = PASSED;
    AVLNodePtr root = NULL;
    for( i=1; i<100000; ++i )
        root = avl_insert( root, i );
    avl_test_recurse( root, &res );
    if( res == FAILED )
        printf("AVL test failed.\n");
    else
        printf("AVL test passed.\n");
    delete_avl_tree( root );
}

int avl_test_recurse( AVLNodePtr tnode, TestResult * res ){
    int h_left,h_right;
    if( !tnode )
        return -1;
    h_left = avl_test_recurse( tnode->child[LEFT], res );
    h_right = avl_test_recurse( tnode->child[RIGHT], res );
    *res =  (abs(h_left-h_right) > 1 ) ? FAILED:*res;
    return 1+max(h_left,h_right);
}


void insert_delete_search_test(){
    int i=1;
    AVLNodePtr node = NULL, root = NULL;
    TestResult res = PASSED;
    for( i=1; i<100; ++i )
        root = avl_insert( root, i );
    for( i=1; i<100; ++i )
    {
        if( !((node = avl_search( root, i )) && (node->key == i)))
        {
            res = FAILED;
            break;
        }
        root = avl_delete( root, i );
        if( avl_search( root, i ) )
        {
            res = FAILED;
            break;
        }
    }
    if( res == FAILED )
        printf("insert/delete/search test failed.\n");
    else
        printf("insert/delete/search test passed.\n");
    delete_avl_tree( root );
}

void rank_reversed_test(){
    int i=11;
    AVLNodePtr  root = NULL;
    TestResult res = PASSED;
    for( i=11; i<21; ++i )
        root = avl_insert( root, i );
    if( (avl_rank( root, 20 ) != 10) ||
        (avl_rank(root,11) != 1) ||
        (avl_reversed_rank(root,12) != 9) ||
        (avl_reversed_rank(root,15) != 6) ||
        (avl_rank(root, 15) != 5) )
        res = FAILED;
    if( res == FAILED )
        printf("rank/reversed test failed.\n");
    else
        printf("rank/reversed test passed.\n");
    delete_avl_tree( root );
}

void last_missing_test()
{
    AVLNodePtr root = NULL;
    TestResult res = PASSED;
    root = avl_insert( root, 1 );
    res = (last_missing( root )==0)?res:FAILED;
    root = avl_insert( root, 3 );
    res = (last_missing( root )==2)?res:FAILED;
    root = avl_insert( root, 2 );
    res = (last_missing( root )==0)?res:FAILED;
    if( res == FAILED )
        printf("last_missing test failed.\n");
    else
        printf("last_missing test passed.\n");
    delete_avl_tree( root );
}

void howmany_test(){
    int i=11;
    AVLNodePtr root = NULL;
    TestResult res = PASSED;
    for( i=21; i<41; ++i )
        root = avl_insert( root, i );
    if( (avl_HowMany(root, 25,31 ) != 7) ||
        (avl_HowMany(root,28,38) != 11) ||
        (avl_HowMany(root,26,38) != 13) ||
        (avl_HowMany(root,0,24) != 4) ||
        (avl_HowMany(root, 30,80) != 11) ||
        (avl_HowMany(root, 30,30) != 1) )
        res = FAILED;
    if( res == FAILED )
        printf("howmany_test test failed.\n");
    else
        printf("howmany_test test passed.\n");
    delete_avl_tree( root );
}

int main()
{
    /*mytest();*/
    avl_test();
    insert_delete_search_test();
    rank_reversed_test();
    howmany_test();
    last_missing_test();

    printf("AVL: Hello World!\n");
    return 0;
}